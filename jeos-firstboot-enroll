#!/bin/bash

crypt_keyid=""
with_fido2=
with_tpm2=

# After the enrolling, other tools can find this list in the LUKS
# header
pcrs="0,2,4,7,9"

enroll_systemd_firstboot() {
    crypt_keyid="$(keyctl id %user:cryptenroll)"
    [ -n "$crypt_keyid" ] || return 0
    [ -e /usr/bin/systemd-cryptenroll ] || return 0

    local dev
    while read -r dev fstype; do
	[ "$fstype" = 'crypto_LUKS' ] || continue
	crypt_devs+=("$dev")
    done < <(lsblk --noheadings -o PATH,FSTYPE)
    if [ -z "${crypt_devs[0]}" ]; then
	d --msgbox $"Error: recovery set but no encrypted disks found" 0 0
	unset crypt_keyid
	return 0
    fi

    if [ -n "$password" ] && dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Use root password as encryption password?" 0 0; then
	crypt_pw="$password"
    else
	while true; do
	    d --insecure --passwordbox  $"Enter encryption password" 0 0
	    if [ -z "$result" ]; then
		d --aspect 29 --msgbox $"No encryption password set. You can add more keys manually using cryptsetup." 0 0
		break
	    fi
	    crypt_pw="$result"
	    d --insecure --passwordbox  $"Confirm encryption password" 0 0
	    [ "$crypt_pw" != "$result" ] || break
	    d --msgbox $"Passwords don't match. Try again" 0 0
	done
    fi

    local has_fido2=${JEOS_HAS_FIDO2:-}
    local has_tpm2=

    [ -z "$(systemd-cryptenroll --fido2-device=list 2>/dev/null)" ] || has_fido2=1
    [ -e '/sys/class/tpm/tpm0' ] && has_tpm2=1

   # For now seems that if a FIDO2 key is enrolled, it will take
   # precedence over the TPM2 and the key will be asked to be present
   # in subsequent boots.
   if [ "$has_fido2" = '1' ] && [ "$has_tpm2" = '1' ]; then
	local list=('FIDO2' 'FIDO2' 'TPM2' 'TPM2' 'none' $"Skip")
	d --no-tags --default-item 'FIDO2' --menu $"Select unlock device" 0 0 "$(menuheight ${#list[@]})" "${list[@]}"
	[ "$result" = 'FIDO2' ] && with_fido2=1
	[ "$result" = 'TPM2' ] && with_tpm2=1
    elif [ "$has_fido2" ]; then
	dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Unlock encrypted disk via FIDO2 token?" 0 0 && with_fido2=1
    elif [ "$has_tpm2" ]; then
	dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Unlock encrypted disk via TPM?" 0 0 && with_tpm2=1
    fi
    return 0
}

enroll_fido2() {
    local dev="$1"

    echo "Enrolling with FIDO2: $dev"

    # The password is read from "cryptenroll" kernel keyring
    run systemd-cryptenroll --fido2-device=auto "$dev"
}

generate_rsa_key() {
    [ -z "$dry" ] && mkdir -p /etc/systemd
    run pcr-oracle \
	--rsa-generate-key \
	--private-key /etc/systemd/tpm2-pcr-private-key.pem \
	--public-key /etc/systemd/tpm2-pcr-public-key.pem \
	store-public-key
}

enroll_tpm2() {
    local dev="$1"

    echo "Enrolling with TPM2: $dev"

    # The password is read from "cryptenroll" kernel keyring
    # XXX: Wipe is separated by now (possible systemd bug)
    run systemd-cryptenroll \
	--wipe-slot=tpm2 \
	"$dev"

    run systemd-cryptenroll \
	--tpm2-device=auto \
	--tpm2-public-key=/etc/systemd/tpm2-pcr-public-key.pem \
	--tpm2-public-key-pcrs="$pcrs" \
	"$dev"
}

update_crypttab_options() {
    # This version will share the same options for all crypto_LUKS
    # devices.  This imply that all of them will be unlocked by the
    # same password, TPM2, or FIDO2 key
    local options="$1"

    # TODO: this needs to be unified with disk-encryption-tool
    local crypttab
    if [ -z "$dry" ]; then
	    crypttab="$(mktemp -t disk-encryption-tool.crypttab.XXXXXX)"
    else
	    crypttab=/dev/stdout
    fi
    echo "# File created by jeos-firstboot-enroll.  Comments will be removed" > "$crypttab"

    local name
    local device
    local key
    local opts
    while read -r name device key opts; do
	[[ "$name" = \#* ]] && continue
	echo "$name $device $key $options" >> "$crypttab"
    done < /etc/crypttab

    run mv "$crypttab" /etc/crypttab
    run chmod 644 /etc/crypttab
}

enroll_post() {
    [ -n "$crypt_keyid" ] || return 0
    [ -e /usr/bin/systemd-cryptenroll ] || return 0

    if [ -e '/usr/sbin/issue-generator' ] && [ -z "$dry" ]; then
	mkdir -p "/run/issue.d/"
	issuefile="/run/issue.d/90-diskencrypt.conf"
    else
	issuefile='/dev/stdout'
    fi

    if [ -n "$crypt_pw" ]; then
	local dev
	export NEWPASSWORD="$password"
	for dev in "${crypt_devs[@]}"; do
	    echo "replacing initial password on $dev"
	    run systemd-cryptenroll --wipe-slot=password --password "$dev"
	done
	unset NEWPASSWORD
	read -r crypt_keyid < <(echo -n "$password" | keyctl padd user cryptenroll @u)
    fi

    echo -ne "Encryption recovery key:\n  " > "$issuefile"
    run systemd-cryptenroll --recovery-key "$dev" >> "$issuefile"

    crypttab_options="x-initrd.attach"

    if [ "$with_fido2" = '1' ]; then
	for dev in "${crypt_devs[@]}"; do
	    enroll_fido2 "$dev"
	done
	crypttab_options+=",fido2-device=auto"
    fi

    if [ "$with_tpm2" = '1' ]; then
	generate_rsa_key
	
	for dev in "${crypt_devs[@]}"; do
	    enroll_tpm2 "$dev"
	done
	crypttab_options+=",tpm2-device=auto"
    fi

    update_crypttab_options "$crypttab_options"

    run sdbootutil add-all-kernels --no-reuse-initrd

    run issue-generator
    [ -n "$dry" ] || cat "$issuefile"
}
