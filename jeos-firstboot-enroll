#!/bin/bash

with_fido2=
with_tpm2=
with_tpm2_pin=

declare -a luks2_devices

# After the enrolling, other tools can find this list in
# /etc/sysconfig/fde-tools
FDE_SEAL_PCR_LIST="0,2,4,7,9"


have_luks2()
{
    [ "${#luks2_devices[@]}" -gt 0 ]
}

detect_luks2()
{
    local dev fstype
    [ -z "$luks2_devices" ] || return 0
    while read -r dev fstype; do
	[ "$fstype" = 'crypto_LUKS' ] || continue
	cryptsetup isLuks --type luks2 "$dev" || continue
	luks2_devices+=("$dev")
    done < <(lsblk --noheadings -o PATH,FSTYPE)
    have_luks2
}

enroll_systemd_firstboot() {
    [ -e /usr/bin/systemd-cryptenroll ] || return 0
    detect_luks2 || return 0

    local has_fido2=${JEOS_HAS_FIDO2:-}
    local has_tpm2=

    [ -z "$(systemd-cryptenroll --fido2-device=list 2>/dev/null)" ] || has_fido2=1
    if [ -e '/sys/class/tpm/tpm0' ]; then
	if have_pcrlock; then
	    has_tpm2=lock
	elif have_pcr_oracle; then
	    has_tpm2=oracle
	fi
    fi

    # For now seems that if a FIDO2 key is enrolled, it will take
    # precedence over the TPM2 and the key will be asked to be present
    # in subsequent boots.
    if [ "$has_fido2" = '1' ] && [ -n "$has_tpm2" ]; then
	local list=('FIDO2' 'FIDO2' 'TPM2' 'TPM2' 'none' $"Skip")
	d --no-tags --default-item 'FIDO2' --menu $"Select unlock device" 0 0 "$(menuheight ${#list[@]})" "${list[@]}"
	[ "$result" = 'FIDO2' ] && with_fido2=1
	[ "$result" = 'TPM2' ] && with_tpm2="$has_tpm2"
    elif [ "$has_fido2" ]; then
	dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Unlock encrypted disk via FIDO2 token?" 0 0 && with_fido2=1
    elif [ -n "$has_tpm2" ]; then
	if [ -n "$crypt_pw" ]; then
	    dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Unlock encrypted disk via TPM2 using the registered password as PIN?" 0 0 && with_tpm2="$has_tpm2" && with_tpm2_pin=1
	    # Ideally here we could register the password in the
	    # kernel keyring for "tpm2-pin", the label used in
	    # systemd.  But in systemd, passwords asked two times (for
	    # confirmation) are not cached, so they are not read for
	    # the keyring.  We are forced to use "NEWPIN=" environment
	    # variable.
	fi

	if [ -z "$with_tpm2_pin" ]; then
	    dialog $dialog_alternate_screen --backtitle "$PRETTY_NAME" --yesno $"Unlock encrypted disk via TPM2?" 0 0 && with_tpm2="$has_tpm2"
	fi
    fi
    return 0
}

enroll_fido2() {
    local dev="$1"

    echo "Enrolling with FIDO2: $dev"

    # The password is read from "cryptenroll" kernel keyring
    run systemd-cryptenroll --fido2-device=auto "$dev"
}

generate_rsa_key() {
    [ -z "$dry" ] && mkdir -p /etc/systemd
    run pcr-oracle \
	--rsa-generate-key \
	--private-key /etc/systemd/tpm2-pcr-private-key.pem \
	--public-key /etc/systemd/tpm2-pcr-public-key.pem \
	store-public-key
}

enroll_tpm2_pcr_oracle() {
    local dev="$1"

    echo "Enrolling with TPM2 (pcr-oracle): $dev"

    # The password is read from "cryptenroll" kernel keyring
    # XXX: Wipe is separated by now (possible systemd bug)
    run systemd-cryptenroll \
	--wipe-slot=tpm2 \
	"$dev"

    local extra_params=""
    if [ "$with_tpm2_pin" = "1" ]; then
	extra_params="--tpm2-with-pin=yes"
    fi

    NEWPIN="$crypt_pw" run systemd-cryptenroll \
	--tpm2-device=auto \
	--tpm2-public-key=/etc/systemd/tpm2-pcr-public-key.pem \
	--tpm2-public-key-pcrs="$FDE_SEAL_PCR_LIST" \
	${extra_params} \
	"$dev"
}

enroll_tpm2_pcrlock() {
    local dev="$1"

    echo "Enrolling with TPM2 (pcrlock): $dev"

    # The password is read from "cryptenroll" kernel keyring
    # XXX: Wipe is separated by now (possible systemd bug)
    run systemd-cryptenroll \
	--wipe-slot=tpm2 \
	"$dev"

    local extra_params=""
    if [ "$with_tpm2_pin" = "1" ]; then
	extra_params="--tpm2-with-pin=yes"
    fi

    # Note that the PCRs are now not stored in the LUKS2 header
    NEWPIN="$crypt_pw" run systemd-cryptenroll \
	--tpm2-device=auto \
	--tpm2-pcrlock=/var/lib/systemd/pcrlock.json \
	${extra_params} \
	"$dev"
}

update_crypttab_options() {
    # This version will share the same options for all crypto_LUKS
    # devices.  This imply that all of them will be unlocked by the
    # same TPM2, or the same FIDO2 key
    local options="$1"

    # TODO: this needs to be unified with disk-encryption-tool
    local crypttab
    if [ -z "$dry" ]; then
	    crypttab="$(mktemp -t disk-encryption-tool.crypttab.XXXXXX)"
    else
	    crypttab=/dev/stdout
    fi
    echo "# File created by jeos-firstboot-enroll.  Comments will be removed" > "$crypttab"

    local name
    local device
    local key
    local opts
    while read -r name device key opts; do
	[[ "$name" = \#* ]] && continue
	echo "$name $device $key $options" >> "$crypttab"
    done < /etc/crypttab

    run mv "$crypttab" /etc/crypttab
    run chmod 644 /etc/crypttab
}

have_pcrlock() {
    [ -e /usr/lib/systemd/systemd-pcrlock ]
}

have_pcr_oracle() {
    [ -e /usr/bin/pcr-oracle ]
}

is_pcr_oracle() {
    have_pcr_oracle && \
	[ -e /etc/systemd/tpm2-pcr-public-key.pem ] && \
	[ -e /etc/systemd/tpm2-pcr-private-key.pem ]
}

enroll_post() {
    [ -e /usr/bin/systemd-cryptenroll ] || return 0
    detect_luks2 || return 0

    # For now is a first step before moving into fde-tools
    if [ -e /etc/sysconfig/fde-tools ]; then
	. /etc/sysconfig/fde-tools
    else
	echo "FDE_SEAL_PCR_LIST=${FDE_SEAL_PCR_LIST}" > /etc/sysconfig/fde-tools
    fi

    local dev
    local fstype

    crypttab_options="x-initrd.attach"

    # Generate first the crypttab + initrd, so the predictions can be
    # done in case of pcrlock
    if [ "$with_fido2" = '1' ]; then
	crypttab_options+=",fido2-device=auto"
    elif [ -n "$with_tpm2" ]; then
	crypttab_options+=",tpm2-device=auto"
    fi
    update_crypttab_options "$crypttab_options"

    if [ "$with_tpm2" = 'oracle' ]; then
	generate_rsa_key
    else
	# sdbootutil will generate predictions for pcrlock
	SDB_ADD_INITIAL_CMDLINE=1 run sdbootutil add-all-kernels --no-reuse-initrd
    fi

    if [ "$with_fido2" = '1' ]; then
	for dev in "${luks2_devices[@]}"; do
	    enroll_fido2 "$dev"
	done
    elif [ -n "$with_tpm2" ]; then
	for dev in "${luks2_devices[@]}"; do
	    if [ "$with_tpm2" = 'lock' ]; then
		enroll_tpm2_pcrlock "$dev"
	    else
		enroll_tpm2_pcr_oracle "$dev"
	    fi
	done
    fi

    if [ "$with_tpm2" = 'oracle' ]; then
	# with pcr-oracle we pick up settings from the luks header
	run sdbootutil add-all-kernels --no-reuse-initrd
    fi
}
